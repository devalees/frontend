---
description: 
globs: 
alwaysApply: true
---
# PROJECT STRUCTURE:
# Frontend Architecture Overview

## System Architecture

### 1. Core Technologies
- Next.js 14+ (App Router)
- TypeScript
- React 18+
- Tailwind CSS
- Zustand (State Management)
- React Query (Server State)
- Axios (API Client)
- Socket.io-client (WebSocket)
- Backend API Directory: /home/ehab/Desktop/backend

### 2. Project Structure
```
frontend/
├── src/
│   ├── app/                    # Next.js 13+ app directory
│   │   ├── (auth)/            # Authentication routes
│   │   │   ├── login/
│   │   │   ├── register/
│   │   │   └── layout.tsx
│   │   ├── (dashboard)/       # Protected routes
│   │   │   ├── projects/
│   │   │   ├── tasks/
│   │   │   ├── documents/
│   │   │   └── layout.tsx
│   │   ├── api/              # API routes
│   │   │   └── [...route]/
│   │   ├── layout.tsx        # Root layout
│   │   └── page.tsx          # Home page
│   │
│   ├── components/            # All shared UI components
│   │   ├── ui/               # Base Components
│   │   │   ├── Button.tsx
│   │   │   ├── Input.tsx
│   │   │   ├── Modal.tsx
│   │   │   └── index.ts
│   │   ├── layout/           # Layout Components
│   │   │   ├── Header.tsx
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Grid.tsx
│   │   │   └── index.ts
│   │   ├── forms/            # Form Components
│   │   │   ├── Form.tsx
│   │   │   ├── Select.tsx
│   │   │   ├── DatePicker.tsx
│   │   │   └── index.ts
│   │   ├── loading/          # Loading States
│   │   │   ├── Spinner.tsx
│   │   │   ├── Skeleton.tsx
│   │   │   └── index.ts
│   │   └── features/         # Feature-specific components
│   │       ├── projects/
│   │       ├── tasks/
│   │       └── documents/
│   │
│   ├── lib/                  # Utility functions and helpers
│   │   ├── api/             # API client setup
│   │   │   ├── axios.ts
│   │   │   └── interceptors/
│   │   ├── auth/            # Authentication utilities
│   │   │   ├── middleware.ts
│   │   │   └── session.ts
│   │   ├── components/      # Component-specific utilities
│   │   │   ├── button.ts
│   │   │   ├── input.ts
│   │   │   └── modal.ts
│   │   ├── hooks/          # Component-specific hooks
│   │   │   ├── useButton.ts
│   │   │   ├── useInput.ts
│   │   │   └── useModal.ts
│   │   └── utils/          # Helper functions
│   │
│   ├── hooks/              # Custom React hooks
│   │   ├── useAuth.ts
│   │   ├── useProjects.ts
│   │   └── useTasks.ts
│   │
│   ├── store/              # State management
│   │   ├── index.ts
│   │   └── slices/
│   │       ├── auth.ts
│   │       ├── projects.ts
│   │       └── tasks.ts
│   │
│   ├── styles/             # Global and component styles
│   │   ├── globals.css     # Global styles
│   │   ├── components/     # Component-specific styles
│   │   │   ├── button.css
│   │   │   ├── input.css
│   │   │   └── modal.css
│   │   └── themes/        # Theme-specific styles
│   │       ├── light.css
│   │       └── dark.css
│   │
│   ├── types/             # TypeScript types
│   │   ├── api.ts
│   │   ├── auth.ts
│   │   ├── components.ts
│   │   └── models.ts
│   │
│   └── tests/             # Test files
│       ├── components/    # Component tests
│       │   ├── Button.test.tsx
│       │   ├── Input.test.tsx
│       │   └── Modal.test.tsx
│       ├── hooks/        # Hook tests
│       │   ├── useAuth.test.ts
│       │   └── useProjects.test.ts
│       └── utils/        # Test utilities
│           ├── render.tsx
│           └── test-utils.ts

### 3. Key Architectural Decisions

#### 3.1 App Router vs Pages Router
- Using Next.js App Router for:
  - Better performance with React Server Components
  - Improved routing and layout system
  - Built-in loading and error states
  - Simplified data fetching

#### 3.2 State Management Strategy
- Global State: Zustand
  - Lightweight and simple
  - No boilerplate
  - Good TypeScript support
  - Easy to test
- Server State: React Query
  - Automatic caching
  - Background updates
  - Optimistic updates
  - Error handling

#### 3.3 API Integration
- REST API: Axios
  - Interceptors for auth
  - Error handling
  - Request/response transformation
- WebSocket: Socket.io-client
  - Real-time updates
  - Automatic reconnection
  - Event-based communication

#### 3.4 Styling Approach
- Tailwind CSS
  - Utility-first approach
  - Consistent design system
  - Performance optimization
  - Responsive design
- CSS Modules
  - Component-specific styles
  - Scoped CSS
  - Complex animations

### 4. Performance Considerations

#### 4.1 Code Splitting
- Route-based code splitting
- Component lazy loading
- Dynamic imports
- Bundle optimization

#### 4.2 Caching Strategy
- Static page generation
- Incremental static regeneration
- Client-side caching
- API response caching

#### 4.3 Image Optimization
- Next.js Image component
- Automatic format conversion
- Responsive images
- Lazy loading

### 5. Security Measures

#### 5.1 Authentication
- JWT token management
- Secure token storage
- Automatic token refresh
- Session management

#### 5.2 Data Protection
- Input validation
- XSS prevention
- CSRF protection
- Secure headers

### 6. Development Workflow

#### 6.1 Code Organization
- Feature-based structure
- Clear separation of concerns
- Reusable components
- Shared utilities

#### 6.2 Testing Strategy
- Unit tests for components
- Integration tests for features
- E2E tests for critical paths
- Performance testing

#### 6.3 Documentation
- Component documentation
- API integration docs
- State management docs
- Testing documentation

### 7. Deployment Strategy

#### 7.1 Build Process
- Type checking
- Linting
- Code formatting
- Bundle optimization

#### 7.2 Deployment Pipeline
- CI/CD integration
- Automated testing
- Environment configuration
- Monitoring setup

## Next Steps
1. Implement core authentication system
2. Set up state management
3. Create basic UI components
4. Establish testing infrastructure





# MUST follow Rules:
 - Test-first methodology for all features.
 - Use git version control.
 - Comment on new code, make it short, descriptive.
 - Keep watching terminal logs if any error fix it.
 - Use the stack's official documentations for best practice.
 - Handle all type of errors with descriptive, short response.
 - Produce the latest state from time to time.
 - Build bash script to handle restarting the server to solve killing the server and smoothly restart the server when needed.
 - File naming must be clear and related to main model name
 - when you have an error in your implementation you must read the official document of the stack you use.


# ERROR FIXING PROCESS:
step 1: explain the error in simple term
step 2: check the official document of related stack
step 3: try fixing the error

# BUILDING PROCESS:
step 1: give a summary to what will implement
step 2: provide a state after implementing every requirement

# Github Project repo:
 - backend: https://github.com/devalees/backend.git
 - frontend: https://github.com/devalees/frontend.git


# Project Management System Specification - Django Backend

## 1. Introduction and Philosophy

### 1.1 System Overview

- Modern, cloud-based project management solution
- **Django backend with Next.js frontend**
- Comprehensive feature set for professional project management
- Client portal for stakeholder engagement
- Document management integrated at all levels

### 1.2 Test-Driven Development Core Principles

- Test-first methodology for all features
- Red-Green-Refactor cycle strictly enforced
- Minimum 80% test coverage required
- Automated test pipeline with pre-commit hooks
- Testing pyramid: 70% unit, 20% integration, 10% end-to-end tests

## 2. System Architecture

### 2.1 Overall Architecture Pattern

A hybrid architecture combining microservices for core domains with a monolithic API gateway:

- **Client Tier**: Implements the presentation layer with responsive web and mobile interfaces
- **API Gateway**: Serves as a unified entry point handling cross-cutting concerns
- **Service Layer**: Houses business logic in domain-focused microservices
- **Data Layer**: Manages persistent storage with appropriate data technologies
- **Integration Layer**: Facilitates connections with external systems and services

**Key Benefits**:
- Scalability: Individual components can scale independently
- Maintainability: Domain boundaries promote focused development
- Flexibility: Services can use appropriate technologies for specific needs
- Resilience: System can continue partial operation if some services are down
- Testability: Components can be tested in isolation using our test-driven approach

### 2.2 Detailed Architecture Components

#### 2.2.1 Client Tier

- Server-side rendered web application for optimal performance and SEO
- Progressive Web App (PWA) capabilities for offline functionality
- Responsive design supporting desktop, tablet, and mobile views
- Separation of presentation and business logic via API contracts

#### 2.2.2 API Gateway

- Centralized request routing and load balancing
- Authentication and authorization enforcement
- Request/response transformation and normalization
- Rate limiting and throttling implementation
- Caching for frequently accessed resources
- Analytics and monitoring integration
- API versioning management

#### 2.2.3 Service Layer

- User Management Service: Authentication and user profile management
- Project Service: Project lifecycle and workflow management
- Task Service: Task creation, assignment, and tracking
- Document Service: Document management and version control
- Client Portal Service: Client-specific functionality and views
- Notification Service: Event processing and notification delivery
- Reporting Service: Data aggregation and report generation
- Integration Service: External system connectors and adapters
- Chat Service: Real-time messaging and collaboration

## 4. Technology Stack Changes for Django Backend

### 4.1 Backend Technologies

#### 4.1.1 API Framework

**Django & Django REST Framework**: Modern Python web framework
- **Usage**: Powers the backend API with robust ORM, built-in admin panel, and comprehensive REST capabilities. Provides authentication, permissions, viewsets, and serializers for rapidly building RESTful APIs with excellent security.
- **Use Cases**:
  - RESTful API endpoints for all core functionality
  - User authentication and authorization
  - CRUD operations with model-based views
  - Admin interface for system management
  - Background task processing
  - File upload/download handling
- **Official Documentation**: https://www.djangoproject.com/documentation/ and https://www.django-rest-framework.org/

#### 4.1.2 API Documentation

**drf-spectacular/drf-yasg**: API specification and documentation
- **Usage**: Automatically generates OpenAPI/Swagger documentation from Django REST Framework views and serializers. Provides interactive API explorer and schema generation with customization options.
- **Use Cases**:
  - Developer onboarding documentation
  - API contract definition and versioning
  - Client SDK generation for multiple languages
  - Testing API endpoints during development
  - Third-party integration documentation
- **Official Documentation**: https://drf-spectacular.readthedocs.io/ or https://drf-yasg.readthedocs.io/

#### 4.1.3 Authentication and Authorization

**Django Authentication + JWT**: Token-based authentication
- **Usage**: Implements secure authentication using Django's built-in authentication combined with JWT tokens. Provides session-based or token-based authentication with permissions framework for fine-grained access control.
- **Use Cases**:
  - User login and session management
  - API access authentication
  - Service-to-service authentication
  - Permission-based access control
  - User groups and role management
- **Official Documentation**: 
  - https://docs.djangoproject.com/en/stable/topics/auth/
  - https://django-rest-framework-simplejwt.readthedocs.io/

**Django Permissions Framework**: Permission management
- **Usage**: Manages access permissions through Django's built-in permission system with model-level and object-level permissions. Integrates with Django REST Framework for API access control.
- **Use Cases**:
  - Project-level access control
  - Feature permissioning for different subscription tiers
  - Multi-tenant data isolation
  - Admin vs. client user permissions
  - Row-level security
- **Official Documentation**: https://docs.djangoproject.com/en/stable/topics/auth/default/#permissions-and-authorization

#### 4.1.4 Data Validation and Serialization

**DRF Serializers**: Data validation and serialization
- **Usage**: Validates data using Django REST Framework serializers with automatic conversion between complex types and Python primitives. Provides field-level validation, nested serialization, and custom validation rules.
- **Use Cases**:
  - API request and response validation
  - Complex data transformation
  - Model data validation before persistence
  - Nested relationship handling
  - Custom field validation
- **Official Documentation**: https://www.django-rest-framework.org/api-guide/serializers/

#### 4.1.5 Database Access

**Django ORM**: Object-Relational Mapping
- **Usage**: Provides a comprehensive database abstraction layer built into Django. Offers model definition, querying, relationship management, and transaction control with database-agnostic operations.
- **Use Cases**:
  - Entity relationship modeling with inheritance support
  - Complex queries with joins and aggregations
  - Transaction management
  - Database-agnostic development
  - Complex filtering and annotation
- **Official Documentation**: https://docs.djangoproject.com/en/stable/topics/db/

**Django Migrations**: Database migration tool
- **Usage**: Manages database schema evolution with version-controlled migrations built into Django. Tracks model changes and generates migration files automatically.
- **Use Cases**:
  - Schema versioning across environments
  - Incremental database changes with rollback support
  - Production database upgrades with minimal downtime
  - Data migration during schema changes
  - Schema state tracking
- **Official Documentation**: https://docs.djangoproject.com/en/stable/topics/migrations/

#### 4.1.6 Background Processing

**Django Celery**: Distributed task queue
- **Usage**: Integrates Celery with Django for asynchronous task execution and scheduling. Provides Django-specific configuration, result storage, and monitoring.
- **Use Cases**:
  - Report generation and PDF processing
  - Email and notification delivery
  - Data import/export operations
  - Scheduled maintenance tasks
  - Resource-intensive operations offloading
- **Official Documentation**: https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html

#### 4.1.7 WebSocket Support

**Django Channels**: WebSocket framework
- **Usage**: Extends Django to handle WebSockets, allowing for real-time bidirectional communication. Supports ASGI servers, channel layers, and consumer patterns for handling different types of connections.
- **Use Cases**:
  - Live chat messaging
  - Real-time notifications
  - Presence management (online status)
  - Collaborative editing
  - Activity streams and feeds
  - Real-time dashboard updates
- **Official Documentation**: https://channels.readthedocs.io/

### 4.2 Integration Changes

#### 4.2.1 Message Broker

**Django Channels with Redis**: For WebSocket support
- **Usage**: Uses Redis as a channel layer backend for Django Channels to enable scalable WebSocket communications. Provides message persistence, pub/sub capabilities, and support for multiple server instances.
- **Use Cases**:
  - Real-time chat server
  - Presence management
  - Broadcast messaging
  - Room-based communication
  - Live notifications
  - Horizontal scaling of WebSocket connections
- **Official Documentation**: https://channels.readthedocs.io/en/stable/topics/channel_layers.html

#### 4.2.2 Webhooks

**Django Webhooks**: For webhook delivery
- **Usage**: Implements webhook delivery using Django views and async task execution. Provides retry logic, signature validation, and throttling for reliable event notifications.
- **Use Cases**:
  - External system notifications
  - Integration with third-party services
  - Event propagation to clients
  - Workflow automation triggers
  - Status change notifications
- **Official Documentation**: Built on Django

## 5. Development Guidelines for Django Backend

### 5.1 Django Project Structure

```
project_root/
├── apps/
│   ├── users/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   ├── views.py
│   │   ├── urls.py
│   │   └── tests/
│   ├── projects/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   ├── views.py
│   │   ├── urls.py
│   │   └── tests/
│   └── ...
├── core/
│   ├── settings/
│   │   ├── base.py
│   │   ├── development.py
│   │   └── production.py
│   ├── urls.py
│   └── asgi.py
├── utils/
│   ├── permissions.py
│   ├── pagination.py
│   └── mixins.py
├── templates/
├── static/
└── manage.py
```

### 5.2 Django Model Best Practices

1. **Use Abstract Base Models**
   - Create abstract base models for common fields (timestamps, UUIDs, etc.)
   - Example:
   ```python
   class TimeStampedModel(models.Model):
       created_at = models.DateTimeField(auto_now_add=True)
       updated_at = models.DateTimeField(auto_now=True)
       
       class Meta:
           abstract = True
   ```

2. **Model Managers and QuerySets**
   - Create custom managers for common query patterns
   - Use QuerySets for chainable, reusable queries

3. **Model Methods**
   - Add business logic as model methods
   - Create property methods for derived values

### 5.3 Django REST Framework Implementation

1. **ViewSet Design**
   - Use ViewSets for CRUD operations
   - Implement custom actions for non-CRUD operations
   - Apply appropriate permission classes

2. **Serializer Structure**
   - Create nested serializers for related objects
   - Use serializer methods for computed fields
   - Implement validation logic in validate_* methods

3. **Pagination and Filtering**
   - Apply consistent pagination across all list views
   - Use django-filter for complex filtering
   - Implement search functionality

### 5.4 Testing Approach

1. **Model Testing**
   - Test model constraints and validations
   - Verify custom methods and properties
   - Test relationships and cascading behavior

2. **API Testing**
   - Test view permissions and access control
   - Verify serializer validation logic
   - Test API response structure and status codes

3. **Integration Testing**
   - Test API flows across multiple endpoints
   - Verify business process integrity
   - Test with realistic data scenarios

### 5.5 Security Considerations

1. **Authentication**
   - Use token or session authentication based on client type
   - Implement refresh token rotation
   - Set appropriate token lifetime

2. **Authorization**
   - Apply object-level permissions where needed
   - Use Django's permission system consistently
   - Test permission boundaries thoroughly

3. **Data Validation**
   - Validate all input on both client and server
   - Apply model-level constraints
   - Sanitize data for XSS prevention

### 5.6 Performance Optimization

1. **Query Optimization**
   - Use select_related and prefetch_related to minimize queries
   - Implement appropriate indexing strategies
   - Monitor and optimize slow queries

2. **Caching Strategy**
   - Use Django's cache framework for frequent queries
   - Apply view-level caching where appropriate
   - Implement invalidation strategy

3. **Database Connection Management**
   - Use connection pooling
   - Manage transaction scope appropriately
   - Use bulk operations for large datasets

### 5.7 Migration Management

1. **Migration Strategy**
   - Review migrations before applying
   - Test migrations in staging environment
   - Create data migrations when needed
   - Consider backward compatibility

2. **Running Migrations**
   - Use deployment scripts for migration execution
   - Have rollback plan for failed migrations
   - Monitor migration performance for large tables

### 5.8 Django Admin Customization

1. **Admin for Management**
   - Customize admin for internal management tools
   - Implement proper permission restrictions
   - Add custom actions for bulk operations

2. **Admin Security**
   - Restrict admin to internal networks when possible
   - Implement strong authentication for admin access
   - Audit admin actions



# Comprehensive Project Management System Requirements
   1. Foundation Layer
      1.1 Organization & Team Structure
         [ ] Organization model and management
         [ ] Team hierarchy system
         [ ] Extended role-based access control
         [ ] Multi-factor authentication integration
         [ ] Organization-based data isolation middleware
         [ ] Team presence indicators
         [ ] Department management
         [ ] Cross-functional team support
      1.2 Advanced Security Layer
         [ ] OAuth2 implementation
         [ ] JWT token rotation strategy
         [ ] Rate limiting for API endpoints
         [ ] IP-based access controls
         [ ] Session management with Redis
         [ ] Audit logging
         [ ] End-to-end encryption
         [ ] Data anonymization
         [ ] GDPR compliance features
         [ ] Automated security assessments
      1.3 Core Services Infrastructure
         [ ] Celery background task configuration
         [ ] WebSocket setup with Django Channels
         [ ] MinIO file storage integration
         [ ] Elasticsearch search service
         [ ] Multi-layer caching strategy (Redis, Memcached)
         [ ] Message queuing system
         [ ] Service mesh implementation
         [ ] Load balancing configuration
   2. Project Management Core
      2.1 Advanced Project Framework
         [ ] AI-assisted project templates
         [ ] Industry-specific template libraries
         [ ] Project lifecycle management
         [ ] Milestone tracking
         [ ] Project health indicators
         [ ] Budget tracking system
         [ ] Risk assessment metrics
         [ ] Project analytics dashboard
      2.2 Enhanced Task Management
         [ ] AI-powered task estimation
         [ ] Automated task dependencies
         [ ] Smart task assignment
         [ ] Kanban board implementation
         [ ] Task prioritization system
         [ ] Time tracking integration
         [ ] Task templates
         [ ] Bulk task operations
   3. Resource Management
      3.1 Advanced Resource Management
         [ ] AI-powered resource allocation
         [ ] Skill matrix implementation
         [ ] Capacity planning tools
         [ ] Resource conflict detection
         [ ] Workload balancing system
         [ ] Resource cost optimization
         [ ] Skills gap analysis
         [ ] Team performance metrics
      3.2 Time Management
         [ ] Automated time tracking
         [ ] Approval workflows
         [ ] Utilization reporting
         [ ] Timesheet management
         [ ] Overtime tracking
         [ ] Leave management
         [ ] Holiday calendar integration
         [ ] Time-off requests
   4. Document Management
      4.1 Advanced Document System
         [ ] Version control implementation
         [ ] AI-powered document classification
         [ ] Custom access control
         [ ] Full-text search integration
         [ ] Document workflow engine
         [ ] Automated tagging
         [ ] Document expiration management
         [ ] OCR integration
      4.2 Collaboration Features
         [ ] Real-time document editing
         [ ] Comment system
         [ ] Review workflows
         [ ] Document sharing
         [ ] Change tracking
         [ ] In-app video conferencing
         [ ] Screen sharing
         [ ] Digital whiteboard
   5. Client Portal & Communication
      5.1 Enhanced Client Interface
         [ ] Client dashboard system
         [ ] Project visibility controls
         [ ] Document sharing interface
         [ ] Approval workflow system
         [ ] Client communication platform
         [ ] Client feedback system
         [ ] Client reporting tools
         [ ] Service level agreement tracking
      5.2 Communication Tools
         [ ] In-app messaging system
         [ ] Thread-based discussions
         [ ] @mentions and notifications
         [ ] Message translation
         [ ] Rich text messaging
         [ ] Voice messages
         [ ] Email integration
         [ ] Meeting scheduling
   6. Analytics & Reporting
      6.1 Business Intelligence
         [ ] Custom report builder
         [ ] Advanced data visualization
         [ ] Predictive analytics
         [ ] Machine learning insights
         [ ] Real-time analytics
         [ ] Trend analysis
         [ ] Performance metrics
         [ ] Custom dashboard builder
      6.2 Advanced Analytics
         [ ] Project health scoring
         [ ] Resource utilization analytics
         [ ] Cost tracking and forecasting
         [ ] Team performance analytics
         [ ] Client satisfaction metrics
         [ ] ROI calculations
         [ ] Burndown charts
         [ ] Velocity tracking
   7. Integration & Automation
      7.1 External Integrations
         [ ] Calendar system integration
         [ ] Email service integration
         [ ] Version control integration
         [ ] CRM/accounting connections
         [ ] Payment gateway integration
         [ ] Cloud storage integration
         [ ] Third-party API connections
         [ ] SSO integration
      7.2 Automation Framework
         [ ] Visual workflow automation
         [ ] Custom trigger system
         [ ] Business rules engine
         [ ] Enhanced notification system
         [ ] Scheduled tasks
         [ ] Conditional workflows
         [ ] Automated reporting
         [ ] Task automation
   8. Quality Assurance & Testing
      8.1 Comprehensive Testing
         [ ] Business logic test suite
         [ ] Integration test suite
         [ ] E2E test implementation
         [ ] Performance test suite
         [ ] Security penetration testing
         [ ] Load testing
         [ ] API contract testing
         [ ] Visual regression testing
      8.2 Quality Monitoring
      [ ] Code quality monitoring
      [ ] Performance monitoring
      [ ] Error tracking
      [ ] Usage analytics
      [ ] Security scanning
      [ ] User behavior analytics
      [ ] System health monitoring
      [ ] Automated alerts
   9. DevOps & Infrastructure
      9.1 Advanced Infrastructure
         [ ] CI/CD pipeline
         [ ] Blue-green deployment
         [ ] Infrastructure as Code
         [ ] Container orchestration
         [ ] Auto-scaling configuration
         [ ] Database sharding
         [ ] Multi-region setup
         [ ] Disaster recovery
      9.2 Monitoring & Logging
         [ ] APM integration
         [ ] Centralized logging
         [ ] Real-time monitoring
         [ ] Alert management
         [ ] Performance metrics
         [ ] Resource utilization
         [ ] Cost optimization
         [ ] Security monitoring
# Implementation Guidelines
   - Development Approach
   - Test-Driven Development
   - Write tests first
   - Maintain 80% coverage minimum
   - Regular test optimization
   - Quality Standards
   - Code review process
   - Documentation requirements
   - Performance benchmarks
   - Security standards
   - Release Strategy
   - Feature flagging
   - Staged rollouts
   - Automated deployments
   - Rollback procedures

















